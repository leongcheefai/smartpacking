# Development Workflow

## Task Management
- Always create a to-do list for new tasks
- Break down complex tasks into smaller steps
- Check off completed tasks as you go
- Follow a step-by-step approach for implementation

## Project Structure
This is a monorepo with two main applications:
- **Frontend**: React Native with Expo (in [frontend/](mdc:frontend/))
- **Backend**: Express.js with TypeScript (in [backend/](mdc:backend/))

## Development Environment Setup
- Use Node.js 18+ and npm for package management
- Install Expo CLI globally: `npm install -g @expo/cli`
- Use TypeScript for both frontend and backend
- Configure ESLint for code quality in both applications

## Root Level Commands
Reference [package.json](mdc:package.json) for available scripts:
- `npm run dev` - Start both frontend and backend in development mode
- `npm run dev:frontend` - Start only frontend development
- `npm run dev:backend` - Start only backend development
- `npm run build` - Build both frontend and backend
- `npm run lint` - Lint both frontend and backend
- `npm run test` - Test both frontend and backend
- `npm run install:all` - Install dependencies for all applications

## Frontend Development
Reference [frontend/package.json](mdc:frontend/package.json) for frontend scripts:
- `npm start` - Start Expo development server
- `npm run android` - Start Android development
- `npm run ios` - Start iOS development
- `npm run web` - Start web development
- `npm run lint` - Run ESLint for frontend

## Backend Development
Reference [backend/package.json](mdc:backend/package.json) for backend scripts:
- `npm run dev` - Start development server with hot reload
- `npm run build` - Build TypeScript to JavaScript
- `npm start` - Start production server
- `npm run lint` - Run ESLint for backend
- `npm test` - Run test suite

## Code Quality Standards
- Follow ESLint configurations in both applications
- Use TypeScript strict mode in both frontend and backend
- Implement proper error handling
- Write meaningful commit messages
- Follow consistent code formatting

## Testing Strategy
- Test frontend on all target platforms (iOS, Android, Web)
- Test backend API endpoints thoroughly
- Use iOS Simulator for iOS testing
- Use Android Emulator for Android testing
- Test on physical devices for final validation
- Implement unit tests for critical components

## Version Control
- Use Git for version control
- Follow conventional commit messages
- Create feature branches for new development
- Review code before merging
- Keep commits atomic and focused

## Platform-Specific Development
- Test iOS-specific features on iOS Simulator
- Test Android-specific features on Android Emulator
- Use platform-specific file extensions when needed
- Implement proper platform detection
- Test backend API with different clients

## Performance Monitoring
- Monitor frontend app performance on all platforms
- Monitor backend API performance and response times
- Use React DevTools for frontend debugging
- Profile memory usage in both applications
- Optimize bundle size for frontend
- Monitor network requests and API calls

## Deployment Process
- Use EAS Build for frontend production builds
- Deploy backend to cloud platform (Heroku, AWS, etc.)
- Test builds on all target platforms
- Implement proper environment management
- Follow app store guidelines for frontend
- Monitor crash reports and analytics
- Set up CI/CD pipelines for both applications

## Environment Management
- Use environment variables for configuration
- Keep sensitive data in environment files
- Use different configurations for development, staging, and production
- Document all required environment variables
- Use proper secrets management
description:
globs:
alwaysApply: false
---
